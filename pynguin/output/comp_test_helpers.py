# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import helpers as module_0


def test_case_0():
    int_0 = 309
    var_0 = module_0.has_message_body(int_0)
    assert var_0 is True
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }
    var_1 = var_0.__repr__()
    assert var_1 == "True"


def test_case_1():
    bool_0 = module_0.is_atty()
    assert bool_0 is False
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "y0I{}=d *+"
    list_0 = [str_0, str_0, str_0]
    module_0.is_entity_header(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    default_0 = module_0.Default(**dict_0)
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }
    set_0 = {default_0}
    module_0.is_hop_by_hop_header(set_0)


def test_case_4():
    default_0 = module_0.Default()
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }


def test_case_5():
    default_0 = module_0.Default()
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }
    str_0 = default_0.__str__()
    assert str_0 == "<Default>"


def test_case_6():
    bool_0 = module_0.is_atty()
    assert bool_0 is False
    assert module_0.STATUS_CODES == {
        100: b"Continue",
        101: b"Switching Protocols",
        102: b"Processing",
        103: b"Early Hints",
        200: b"OK",
        201: b"Created",
        202: b"Accepted",
        203: b"Non-Authoritative Information",
        204: b"No Content",
        205: b"Reset Content",
        206: b"Partial Content",
        207: b"Multi-Status",
        208: b"Already Reported",
        226: b"IM Used",
        300: b"Multiple Choices",
        301: b"Moved Permanently",
        302: b"Found",
        303: b"See Other",
        304: b"Not Modified",
        305: b"Use Proxy",
        307: b"Temporary Redirect",
        308: b"Permanent Redirect",
        400: b"Bad Request",
        401: b"Unauthorized",
        402: b"Payment Required",
        403: b"Forbidden",
        404: b"Not Found",
        405: b"Method Not Allowed",
        406: b"Not Acceptable",
        407: b"Proxy Authentication Required",
        408: b"Request Timeout",
        409: b"Conflict",
        410: b"Gone",
        411: b"Length Required",
        412: b"Precondition Failed",
        413: b"Request Entity Too Large",
        414: b"Request-URI Too Long",
        415: b"Unsupported Media Type",
        416: b"Requested Range Not Satisfiable",
        417: b"Expectation Failed",
        418: b"I'm a teapot",
        422: b"Unprocessable Entity",
        423: b"Locked",
        424: b"Failed Dependency",
        426: b"Upgrade Required",
        428: b"Precondition Required",
        429: b"Too Many Requests",
        431: b"Request Header Fields Too Large",
        451: b"Unavailable For Legal Reasons",
        500: b"Internal Server Error",
        501: b"Not Implemented",
        502: b"Bad Gateway",
        503: b"Service Unavailable",
        504: b"Gateway Timeout",
        505: b"HTTP Version Not Supported",
        506: b"Variant Also Negotiates",
        507: b"Insufficient Storage",
        508: b"Loop Detected",
        510: b"Not Extended",
        511: b"Network Authentication Required",
    }
    bool_1 = module_0.has_message_body(bool_0)
    assert bool_1 is True
    var_0 = module_0.has_message_body(bool_0)
    assert var_0 is True
    var_1 = var_0.__repr__()
    assert var_1 == "True"
    default_0 = module_0.Default()
    str_0 = default_0.__str__()
    assert str_0 == "<Default>"
    var_2 = var_0.__repr__()
    assert var_2 == "True"

import pytest
import sys
from helpers import (
    has_message_body, 
    is_entity_header, 
    is_hop_by_hop_header,
    import_string,
    is_atty,
    Default,
)

# Test cases for has_message_body
def test_has_message_body():
    assert has_message_body(200) == True  # 200 is not 1XX, 204, or 304, so has a message body
    assert has_message_body(204) == False  # 204 has no message body
    assert has_message_body(304) == False  # 304 has no message body
    assert has_message_body(100) == False  # 1XX has no message body

# Test cases for is_entity_header
def test_is_entity_header():
    assert is_entity_header("content-type") == True  # 'content-type' is in _ENTITY_HEADERS
    assert is_entity_header("content-length") == True  # 'content-length' is in _ENTITY_HEADERS
    assert is_entity_header("connection") == False  # 'connection' is not in _ENTITY_HEADERS

# Test cases for is_hop_by_hop_header
def test_is_hop_by_hop_header():
    assert is_hop_by_hop_header("connection") == True  # 'connection' is in _HOP_BY_HOP_HEADERS
    assert is_hop_by_hop_header("upgrade") == True  # 'upgrade' is in _HOP_BY_HOP_HEADERS
    assert is_hop_by_hop_header("content-type") == False  # 'content-type' is not in _HOP_BY_HOP_HEADERS

# Test cases for import_string
# def test_import_string():
#     # Assuming we have a module `your_module` with a class `YourClass` defined as:
#     # class YourClass:
#     #     def __init__(self):
#     #         self.value = 42
#     #     def get_value(self):
#     #         return self.value

#     # Test importing the module (replace `your_module.YourClass` with your actual module/class name)
#     obj = import_string("your_module.YourClass")
#     assert obj.get_value() == 42  # Test if the class was imported and initialized properly

#     # Test importing a module object
#     module = import_string("your_module")
#     assert module is not None  # Ensure the module is loaded

# Test cases for is_atty
def test_is_atty(monkeypatch):
    # Mock sys.stdout to simulate an interactive terminal (isatty will return True)
    monkeypatch.setattr(sys.stdout, 'isatty', lambda: True)
    assert is_atty() == True  # Should return True since it's mocked to be interactive

    # Mock sys.stdout to simulate non-interactive (isatty will return False)
    monkeypatch.setattr(sys.stdout, 'isatty', lambda: False)
    assert is_atty() == False  # Should return False since it's mocked to be non-interactive

# # Test cases for Default class
# def test_default_class():
#     # Test the representation of Default object
#     default_obj = Default()
#     assert repr(default_obj) == "<Default>"
#     assert str(default_obj) == "<Default>"

#     # Ensure _default is an instance of Default
#     assert isinstance(_default, Default)

