# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import iterator as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.scanl(dict_0, dict_0, *dict_0)
    module_0.scanl(var_0, dict_0, *var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    str_0 = "4="
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: str_0}
    module_0.scanr(dict_0, str_0)


def test_case_2():
    bytes_0 = b""
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    range_0 = lazy_list_0.__contains__(lazy_list_0)
    assert range_0 is False
    assert len(lazy_list_0) == 0
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.Range()


def test_case_4():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_0 = range_0.__len__()
    assert var_0 == 2


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    range_0 = module_0.Range(*var_0)
    assert len(lazy_list_0) == 3
    assert var_0.index == 3
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    range_0.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"b\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    map_list_0 = module_0.MapList(bytes_0, var_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func == b"b\xb86"
    assert (
        f"{type(map_list_0.list).__module__}.{type(map_list_0.list).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    map_list_0.index(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    int_0 = -3578
    module_0.scanr(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = range_0.count(lazy_list_0)
    bool_0 = True
    map_list_0 = module_0.MapList(bool_0, bool_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func is True
    assert map_list_0.list is True
    map_list_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    range_0 = module_0.Range(*lazy_list_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_1 = range_0.__getitem__(var_0)
    assert var_1 == 24
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    none_type_0 = None
    map_list_0 = module_0.MapList(none_type_0, none_type_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func is None
    assert map_list_0.list is None
    map_list_0.__contains__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xb8"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 1
    var_1 = lazy_list_0.__iter__()
    range_0 = module_0.Range(*var_1)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 184
    var_2 = range_0.__getitem__(var_0)
    assert var_2 == 0
    var_3 = lazy_list_0.__len__()
    assert var_3 == 1
    range_1 = module_0.Range(*lazy_list_0)
    assert len(range_1) == 184
    lazy_list_0.index(var_2, var_2)


def test_case_12():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.count(lazy_list_0)
    assert var_0 == 0
    assert len(lazy_list_0) == 3
    var_1 = lazy_list_0.__len__()
    assert var_1 == 3


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xc9\x91\xd3\xf73"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.scanr(bytes_0, bytes_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\xeb)uxl\xd0~\xb3\xf3g"
    list_0 = [bytes_0, bytes_0]
    float_0 = -692.53
    tuple_0 = (float_0,)
    var_0 = module_0.scanr(tuple_0, tuple_0)
    var_1 = var_0.__iter__()
    var_1.__contains__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\x93\xb8B"
    iterator_0 = module_0.split_by(bytes_0, separator=bytes_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = module_0.scanl(lazy_list_0, bytes_0, *lazy_list_0)
    assert len(lazy_list_0) == 1
    var_0.index(var_0, iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    iterator_0 = module_0.split_by(none_type_0, criterion=none_type_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.count(iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b")"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, separator=bytes_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    lazy_list_2 = module_0.LazyList(lazy_list_1)
    assert (
        f"{type(lazy_list_2.iter).__module__}.{type(lazy_list_2.iter).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    var_0 = lazy_list_2.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    var_1 = lazy_list_2.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 1
    assert len(lazy_list_1) == 1
    assert len(lazy_list_2) == 1
    var_2 = module_0.scanl(lazy_list_1, lazy_list_0)
    var_3 = lazy_list_1.__iter__()
    bytes_1 = b"\xbb=\x06\x08\x16F\x10(\x8c\xe9\xa4\xedXi"
    module_0.Range(*bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    var_1 = lazy_list_0.__iter__()
    range_0 = module_0.Range(*var_1)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_2 = range_0.__getitem__(var_0)
    assert var_2 == 24
    lazy_list_0.index(var_1)


def test_case_19():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.count(lazy_list_0)
    assert var_0 == 0
    assert len(lazy_list_0) == 3
    range_0 = lazy_list_0.count(bytes_0)
    var_1 = lazy_list_0.__len__()
    assert var_1 == 3


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_1 = range_0.__getitem__(var_0)
    assert var_1 == 24
    var_2 = module_0.MapList(var_1, bytes_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "iterator.MapList"
    assert len(var_2) == 3
    module_0.Range(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    int_0 = var_0.__next__()
    assert int_0 == 24
    assert lazy_list_0.list == [24]
    assert var_0.index == 1
    var_1 = lazy_list_0.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 3
    var_0.__getitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"\x18\xb8"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 160
    range_0.__getitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    iterator_0 = module_0.split_by(range_0)
    none_type_0 = None
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=lazy_list_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    lazy_list_1.count(iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=bytes_0)
    lazy_list_1 = module_0.LazyList(lazy_list_0)
    assert (
        f"{type(lazy_list_1.iter).__module__}.{type(lazy_list_1.iter).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    var_0 = module_0.drop_until(bytes_0, lazy_list_0)
    module_0.Range(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.MapList(bool_0, dict_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "iterator.MapList"
    assert len(var_0) == 1
    var_0.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=lazy_list_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    float_0 = -2234.0
    lazy_list_1.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\x18\xb86"
    float_0 = 2041.46422
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b""
    iterator_0 = module_0.split_by(bytes_0, separator=bytes_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    var_1 = lazy_list_0.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 0
    var_2 = lazy_list_0.__iter__()
    var_2.index(lazy_list_0)

import pytest
import operator
from iterator import (
    chunk, take, drop, drop_until, split_by, scanl, scanr,
    LazyList, Range, MapList
)


def test_chunk_gpt():
    assert list(chunk(3, range(10))) == [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
    with pytest.raises(ValueError):
        list(chunk(0, range(5)))


def test_take_gpt():
    assert list(take(5, range(10))) == [0, 1, 2, 3, 4]
    assert list(take(0, range(10))) == []
    assert list(take(100, range(5))) == [0, 1, 2, 3, 4]
    with pytest.raises(ValueError):
        list(take(-1, range(10)))


def test_drop_gpt():
    assert list(drop(5, range(10))) == [5, 6, 7, 8, 9]
    assert list(drop(0, range(5))) == [0, 1, 2, 3, 4]
    assert list(drop(10, range(5))) == []
    with pytest.raises(ValueError):
        list(drop(-1, range(10)))


def test_drop_until_gpt():
    assert list(drop_until(lambda x: x > 5, range(10))) == [6, 7, 8, 9]
    assert list(drop_until(lambda x: x == 0, range(5))) == [0, 1, 2, 3, 4]
    assert list(drop_until(lambda x: x > 10, range(5))) == []


def test_split_by_criterion_gpt():
    data = list(range(10))
    result = list(split_by(data, criterion=lambda x: x % 3 == 0))
    assert result == [[1, 2], [4, 5], [7, 8]]


def test_split_by_separator_gpt():
    data = list(" Split by: ")
    result = list(split_by(data, empty_segments=True, separator=' '))
    assert result == [[], ['S', 'p', 'l', 'i', 't'], ['b', 'y', ':'], []]


def test_split_by_invalid_args_gpt():
    with pytest.raises(ValueError):
        list(split_by(range(5)))  # Neither separator nor criterion
    with pytest.raises(ValueError):
        list(split_by(range(5), criterion=lambda x: x, separator=3))  # Both provided


def test_scanl_with_initial_gpt():
    result = list(scanl(operator.add, [1, 2, 3, 4], 0))
    assert result == [0, 1, 3, 6, 10]


def test_scanl_without_initial_gpt():
    result = list(scanl(lambda acc, x: x + acc, ['a', 'b', 'c', 'd']))
    assert result == ['a', 'ba', 'cba', 'dcba']


def test_scanr_with_initial_gpt():
    result = scanr(operator.add, [1, 2, 3, 4], 0)
    assert result == [10, 9, 7, 4, 0]



def test_lazylist_access_gpt():
    ll = LazyList(range(10))
    assert ll[0] == 0
    assert ll[5] == 5
    assert ll[:3] == [0, 1, 2]
    with pytest.raises(TypeError):
        len(ll)
    # Force exhaustion
    list(ll)
    assert len(ll) == 10


def test_lazylist_iteration_gpt():
    ll = LazyList(range(5))
    assert list(ll) == [0, 1, 2, 3, 4]


def test_range_gpt():
    r = Range(1, 11, 2)
    assert r[0] == 1
    assert r[1] == 3
    assert r[-1] == 9
    assert r[:3] == [1, 3, 5]
    assert len(r) == 5
    assert list(r) == [1, 3, 5, 7, 9]


def test_maplist_basic_gpt():
    a = [1, 2, 3, 4, 5]
    ml = MapList(lambda x: x * x, a)
    assert ml[0] == 1
    assert ml[2] == 9
    assert ml[:3] == [1, 4, 9]
    assert list(ml) == [1, 4, 9, 16, 25]
    assert len(ml) == 5


def test_maplist_with_index_func_gpt():
    a = [1, 2, 3]
    b = [4, 5, 6]
    ml = MapList(lambda i: a[i] * b[i], Range(3))
    assert list(ml) == [4, 10, 18]


import pytest
import operator
from typing import List
from iterator import (
    chunk, take, drop, drop_until, split_by,
    scanl, scanr, LazyList, Range, MapList
)

def test_chunk():
    """Test chunk function with various inputs"""
    assert list(chunk(3, range(10))) == [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
    assert list(chunk(2, [1, 2, 3, 4, 5])) == [[1, 2], [3, 4], [5]]
    assert list(chunk(1, [1, 2, 3])) == [[1], [2], [3]]
    
    with pytest.raises(ValueError):
        list(chunk(0, range(10)))
    with pytest.raises(ValueError):
        list(chunk(-1, range(10)))

def test_take():
    """Test take function"""
    assert list(take(3, range(10))) == [0, 1, 2]
    assert list(take(5, [1, 2, 3])) == [1, 2, 3]  # Less elements than requested
    assert list(take(0, range(10))) == []
    
    with pytest.raises(ValueError):
        list(take(-1, range(10)))

def test_drop():
    """Test drop function"""
    assert list(drop(3, range(5))) == [3, 4]
    assert list(drop(5, [1, 2, 3])) == []  # Drop more than available
    assert list(drop(0, range(3))) == [0, 1, 2]
    
    with pytest.raises(ValueError):
        list(drop(-1, range(10)))

def test_drop_until():
    """Test drop_until function"""
    assert list(drop_until(lambda x: x > 5, range(10))) == [6, 7, 8, 9]
    assert list(drop_until(lambda x: x == 3, [1, 2, 3, 4])) == [3, 4]
    assert list(drop_until(lambda x: True, [1, 2, 3])) == [1, 2, 3]
    assert list(drop_until(lambda x: False, [1, 2, 3])) == []

def test_split_by_criterion():
    """Test split_by function with criterion"""
    assert list(split_by(range(10), criterion=lambda x: x % 3 == 0)) == [[1, 2], [4, 5], [7, 8]]
    assert list(split_by([1, 2, 3], criterion=lambda x: x == 2)) == [[1], [3]]
    
    # Test with empty_segments=True
    assert list(split_by([1, 2, 2, 3], empty_segments=True, criterion=lambda x: x == 2)) == [[1], [], [3]]

def test_split_by_separator():
    """Test split_by function with separator"""
    assert list(split_by("a.b.c", separator='.')) == [['a'], ['b'], ['c']]
    assert list(split_by("a..b", empty_segments=True, separator='.')) == [['a'], [], ['b']]

def test_scanl():
    """Test scanl function"""
    assert list(scanl(operator.add, [1, 2, 3, 4], 0)) == [0, 1, 3, 6, 10]
    assert list(scanl(lambda s, x: x + s, ['a', 'b', 'c'])) == ['a', 'ba', 'cba']
    
    with pytest.raises(ValueError):
        list(scanl(operator.add, [1, 2, 3], 0, 1))  # Too many arguments

def test_scanr():
    """Test scanr function"""
    assert scanr(operator.add, [1, 2, 3, 4], 0) == [10, 9, 7, 4, 0]
    assert scanr(lambda s, x: x + s, ['a', 'b', 'c']) == ['abc', 'bc', 'c']

def test_lazy_list():
    """Test LazyList class"""
    lazy = LazyList(range(5))
    assert lazy[0] == 0
    assert lazy[4] == 4
    assert lazy[1:4] == [1, 2, 3]
    
    with pytest.raises(TypeError):
        len(lazy)  # Length not available before exhaustion
    
    # Test iteration
    assert list(lazy) == [0, 1, 2, 3, 4]
    assert len(lazy) == 5  # Now length should be available

def test_map_list():
    """Test MapList class"""
    base_list = [1, 2, 3, 4, 5]
    mapped = MapList(lambda x: x * 2, base_list)
    
    assert mapped[0] == 2
    assert mapped[-1] == 10
    assert mapped[1:4] == [4, 6, 8]
    assert len(mapped) == 5
    assert list(mapped) == [2, 4, 6, 8, 10]