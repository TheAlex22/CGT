# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import blah as module_0


def test_case_0():
    str_0 = '/"\x0cS'
    bool_0 = True
    int_0 = module_0.some_other(bool_0, str_0)
    assert int_0 == 5
    int_1 = 1357
    bool_1 = module_0.is_both(int_1)
    assert bool_1 is True


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    bool_1 = module_0.is_both(bool_0)
    list_0 = [bool_0, bool_0]
    bool_2 = module_0.is_middling_number(bool_0)
    assert bool_2 is False
    str_0 = '(ty"3cMlN'
    str_1 = module_0.start_with_a(str_0)
    assert str_1 == "Nah"
    module_0.is_middling_number(list_0)


def test_case_2():
    str_0 = '/"\x0cS'
    bool_0 = True
    bool_1 = module_0.is_both(bool_0)
    str_1 = module_0.start_with_a(str_0)
    assert str_1 == "Nah"


def test_case_3():
    bool_0 = True
    str_0 = "HD"
    int_0 = module_0.some_other(bool_0, str_0)
    assert int_0 == 5


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    str_0 = "5?BE#rPS7m]["
    int_0 = 1057
    int_1 = module_0.some_other(int_0, none_type_0)
    assert int_1 == 10
    module_0.some_other(none_type_0, str_0)


def test_case_5():
    bool_0 = False
    bool_1 = module_0.is_big_number(bool_0)
    assert bool_1 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    bool_1 = module_0.is_big_number(bool_0)
    assert bool_1 is False
    str_0 = ";kI3"
    bool_2 = module_0.is_big_number(bool_1)
    assert bool_2 is False
    int_0 = module_0.some_other(bool_1, str_0)
    assert int_0 == 5
    bool_3 = module_0.is_both(bool_0)
    str_1 = "A\x0b8!f '^mQ\rH\t6]("
    int_1 = module_0.some_other(bool_3, str_1)
    assert int_1 == 10
    int_2 = 3028
    bool_4 = module_0.is_big_number(int_2)
    assert bool_4 is True
    int_3 = 1248
    bool_5 = module_0.is_big_number(int_3)
    assert bool_5 is True
    module_0.start_with_a(bool_1)
