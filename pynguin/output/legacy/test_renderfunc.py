# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import renderfunc as module_0


def test_case_0():
    int_0 = -3351
    bool_0 = True
    str_0 = module_0.rgb_fg(int_0, int_0, bool_0)
    assert str_0 == "\x1b[38;2;-3351;-3351;Truem"


def test_case_1():
    complex_0 = 1568.4 - 1845.4j
    int_0 = 630
    str_0 = module_0.rgb_fg(complex_0, complex_0, int_0)
    assert str_0 == "\x1b[38;2;(1568.4-1845.4j);(1568.4-1845.4j);630m"
    bool_0 = True
    none_type_0 = None
    bool_1 = False
    str_1 = module_0.eightbit_bg(none_type_0)
    assert str_1 == "\x1b[48;5;Nonem"
    str_2 = module_0.rgb_fg(bool_0, none_type_0, bool_1)
    assert str_2 == "\x1b[38;2;True;None;Falsem"
    bool_2 = True
    str_3 = module_0.sgr(bool_1)
    assert str_3 == "\x1b[Falsem"
    str_4 = module_0.rgb_fg(complex_0, complex_0, bool_2)
    assert str_4 == "\x1b[38;2;(1568.4-1845.4j);(1568.4-1845.4j);Truem"


def test_case_2():
    int_0 = 4062
    str_0 = module_0.eightbit_fg(int_0)
    assert str_0 == "\x1b[38;5;4062m"
    int_1 = 2822
    str_1 = module_0.rgb_bg(int_0, int_0, int_1)
    assert str_1 == "\x1b[48;2;4062;4062;2822m"


def test_case_3():
    bool_0 = True
    none_type_0 = None
    str_0 = module_0.eightbit_bg(none_type_0)
    assert str_0 == "\x1b[48;5;Nonem"
    bool_1 = True
    str_1 = module_0.rgb_bg(bool_0, bool_0, bool_1)
    assert str_1 == "\x1b[48;2;True;True;Truem"
