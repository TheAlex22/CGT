# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import lib as module_1
import sty.primitive as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    module_1.mute(*list_0)


def test_case_1():
    none_type_0 = module_1.mute()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.unmute(*list_0)


def test_case_3():
    none_type_0 = module_1.unmute()


def test_case_4():
    none_type_0 = module_1.mute()
    register_0 = module_2.Register()
    none_type_1 = module_1.mute()
    register_1 = register_0.copy()
    list_0 = [register_1]
    none_type_2 = module_1.mute(*list_0)
    assert register_1.is_muted is True
    none_type_3 = module_1.mute()
    dict_0 = register_1.as_dict()


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = module_1.unmute()
    none_type_1 = module_1.mute()
    bytes_0 = b"\xde?\x85\xfd\x98\xd2"
    register_0 = module_2.Register()
    list_0 = [none_type_1, bytes_0]
    none_type_2 = register_0.set_renderfunc(none_type_1, list_0)
    list_1 = [register_0, register_0]
    none_type_3 = module_1.unmute(*list_1)
    register_1 = module_2.Register()
    var_0 = register_1.as_namedtuple()
    var_0.copy()

import pytest
from sty.primitive import Register

class MockRegister_cla(module_2.Register):
    def __init__(self):
        self.is_muted = False
        
    def mute(self):
        self.is_muted = True
        
    def unmute(self):
        self.is_muted = False

def test_mute_single_register():
    reg = MockRegister_cla()
    module_1.mute(reg)
    assert reg.is_muted == True

def test_mute_multiple_registers():
    reg1 = MockRegister_cla()
    reg2 = MockRegister_cla()
    module_1.mute(reg1, reg2)
    assert reg1.is_muted == True
    assert reg2.is_muted == True

def test_unmute_single_register():
    reg = MockRegister_cla()
    reg.is_muted = True
    module_1.unmute(reg)
    assert reg.is_muted == False

def test_unmute_multiple_registers():
    reg1 = MockRegister_cla()
    reg2 = MockRegister_cla()
    reg1.is_muted = True
    reg2.is_muted = True
    module_1.unmute(reg1, reg2)
    assert reg1.is_muted == False
    assert reg2.is_muted == False

def test_mute_invalid_object():
    with pytest.raises(ValueError):
        module_1.mute("not a register")

def test_unmute_invalid_object():
    with pytest.raises(ValueError):
        module_1.unmute("not a register")

def test_mute_no_args():
    module_1.mute()  # Should not raise any error

def test_unmute_no_args():
    module_1.unmute()  # Should not raise any error
    
from unittest.mock import MagicMock


# Create a mock Register class for testing purposes
class MockRegister(module_2.Register):
    def mute(self):
        pass

    def unmute(self):
        pass


def test_mute_with_valid_objects():
    # Create mock Register objects
    mock_obj1 = MockRegister()
    mock_obj2 = MockRegister()

    # Mock the mute method
    mock_obj1.mute = MagicMock()
    mock_obj2.mute = MagicMock()

    # Call mute() on valid objects
    module_1.mute(mock_obj1, mock_obj2)

    # Assert that mute was called on both objects
    mock_obj1.mute.assert_called_once()
    mock_obj2.mute.assert_called_once()


def test_mute_with_invalid_object():
    # Create a mock Register object and a non-Register object
    mock_obj1 = MockRegister()
    invalid_obj = object()  # Not an instance of Register

    # Test that ValueError is raised when an invalid object is passed
    with pytest.raises(ValueError):
        module_1.mute(mock_obj1, invalid_obj)


def test_unmute_with_valid_objects():
    # Create mock Register objects
    mock_obj1 = MockRegister()
    mock_obj2 = MockRegister()

    # Mock the unmute method
    mock_obj1.unmute = MagicMock()
    mock_obj2.unmute = MagicMock()

    # Call unmute() on valid objects
    module_1.unmute(mock_obj1, mock_obj2)

    # Assert that unmute was called on both objects
    mock_obj1.unmute.assert_called_once()
    mock_obj2.unmute.assert_called_once()


def test_unmute_with_invalid_object():
    # Create a mock Register object and a non-Register object
    mock_obj1 = MockRegister()
    invalid_obj = object()  # Not an instance of Register

    # Test that ValueError is raised when an invalid object is passed
    with pytest.raises(ValueError):
        module_1.unmute(mock_obj1, invalid_obj)