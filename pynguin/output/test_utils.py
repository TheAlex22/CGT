# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils as module_0


def test_case_0():
    str_0 = "C"
    with pytest.raises(ValueError):
        module_0.str_to_bool(str_0)


def test_case_1():
    bytes_0 = b"*"
    with pytest.raises(OSError):
        module_0.load_module_from_file_location(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "rdKt|3U/Scsj3c:XQW\n"
    module_0.load_module_from_file_location(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "Reset the response object.\n\n        This clears much of the state of the object. It should\n        generally not be called directly, but is called automatically as\n        part of the request lifecycle.\n\n        Raises:\n            sanic.exceptions.ServerError: If the response has already been\n                sent.\n        "
    module_0.load_module_from_file_location(str_0, str_0)


def test_case_4():
    str_0 = "t"
    bool_0 = module_0.str_to_bool(str_0)
    assert bool_0 is True
    with pytest.raises(OSError):
        module_0.load_module_from_file_location(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "~R,0\x0cV{\r&bH,T-${'p:~"
    module_0.load_module_from_file_location(str_0)


def test_case_6():
    str_0 = "Retrieve the current request object\n\n        This implements [Context Variables](https://docs.python.org/3/library/contextvars.html)\n        to allow for accessing the current request from anywhere.\n\n        A typical usecase is when you want to access the current request\n        from a function that is not a handler, such as a logging function:\n\n        ```python\n        import logging\n\n        class LoggingFormater(logging.Formatter):\n            def format(self, record):\n                request = Request.get_current()\n                record.url = request.url\n                record.ip = request.ip\n                return super().format(record)\n        ```\n\n        Returns:\n            Request: The current request object\n\n        Raises:\n            sanic.exceptions.ServerError: If it is outside of a request\n                lifecycle.\n        "
    with pytest.raises(AssertionError):
        module_0.load_module_from_file_location(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "F"
    bool_0 = module_0.str_to_bool(str_0)
    assert bool_0 is False
    float_0 = -2679.72148
    list_0 = []
    module_0.load_module_from_file_location(float_0, *list_0)
