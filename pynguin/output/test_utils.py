# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import utils as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.fn()


def test_case_1():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)
    list_0 = [var_0, var_0]
    var_1 = module_0.curry(var_0, var_0)
    var_2 = module_0.compose(tuple_0, *list_0)


def test_case_2():
    tuple_0 = ()
    var_0 = module_0.identity(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.increase(none_type_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.compose(tuple_0)


def test_case_5():
    tuple_0 = ()
    var_0 = module_0.pipe(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x95\x1a_\xe1g'\xc0\xc2\xe1\xcb\xf9\x8b-\xb2\x1f\x17?"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.pipe(bytes_0, *list_0)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)


def test_case_8():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)
    list_0 = [var_0, var_0]
    var_1 = module_0.memoize(var_0, var_0)
    var_2 = module_0.compose(tuple_0, *list_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)
    list_0 = [var_0]
    var_1 = module_0.compose(tuple_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    var_0 = module_0.cond(list_0)
    int_0 = module_0.increase(bool_0)
    assert int_0 == 1
    list_1 = [var_0]
    module_0.compose(list_1, *list_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    tuple_0 = ()
    var_0 = module_0.memoize(tuple_0, tuple_0)
    list_0 = [var_0, var_0]
    callable_0 = module_0.memoize(var_0, var_0)
    module_0.compose(tuple_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    var_0 = module_0.identity(bool_0)
    var_1 = module_0.curry(var_0, var_0)
    int_0 = module_0.increase(bool_0)
    assert int_0 == 1
    list_0 = [var_1]
    var_2 = module_0.compose(list_0, *list_0)
    var_3 = module_0.cond(var_2)
    int_1 = module_0.increase(var_0)
    assert int_1 == 1
    module_0.fn()


@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)
    callable_0 = module_0.memoize(var_0)
    list_0 = [callable_0]
    var_1 = module_0.compose(list_0, *list_0)
    var_2 = module_0.pipe(var_0, *list_0)
    module_0.increase(callable_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    var_0 = module_0.cond(tuple_0)
    callable_0 = module_0.memoize(var_0)
    list_0 = [callable_0, callable_0]
    var_1 = module_0.compose(list_0, *list_0)
    var_2 = module_0.pipe(callable_0, *list_0)
    module_0.increase(callable_0)
