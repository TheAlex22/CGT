# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import date as module_0
import mimesis.enums as module_1
import calendar as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    str_0 = datetime_0.month()
    datetime_1 = module_0.Datetime()
    datetime_1.duration(duration_unit=str_0)


def test_case_1():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.gmt_offset()
    str_2 = datetime_0.formatted_time()
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(str_2, str_2)


def test_case_2():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    timestamp_format_0 = module_1.TimestampFormat.RFC_3339
    var_0 = datetime_0.timestamp(timestamp_format_0)
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(var_0, var_0)


def test_case_3():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    var_0 = datetime_0.timestamp(none_type_0)
    str_0 = datetime_0.gmt_offset()
    str_1 = datetime_0.day_of_week()
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    datetime_0.duration(duration_unit=datetime_0)


def test_case_5():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    str_0 = datetime_0.periodicity()
    none_type_0 = None
    datetime_1 = module_0.Datetime(seed=none_type_0)
    str_1 = datetime_0.periodicity()
    var_0 = datetime_1.timestamp(none_type_0)
    str_2 = datetime_1.gmt_offset()
    with pytest.raises(ValueError):
        datetime_1.bulk_create_datetimes(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.month()
    str_1 = "V\t:y%M3`\tMblli!k >\x0c"
    var_0 = datetime_0.timestamp()
    str_2 = datetime_0.periodicity()
    assert str_2 == "Yearly"
    str_3 = datetime_0.formatted_date()
    module_2.monthrange(str_0, str_1)


def test_case_7():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    str_0 = datetime_0.week_date()
    with pytest.raises(ImportError):
        datetime_0.datetime(timezone=datetime_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.timezone()
    str_2 = datetime_0.gmt_offset()
    str_3 = datetime_0.formatted_time()
    bool_0 = True
    timestamp_format_0 = module_1.TimestampFormat.RFC_3339
    str_4 = datetime_0.century()
    assert str_4 == "XVI"
    var_0 = datetime_0.timestamp(timestamp_format_0)
    datetime_0.bulk_create_datetimes(bool_0, str_0)


def test_case_9():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.gmt_offset()
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(str_0, str_0)


def test_case_10():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    int_0 = -349
    bool_0 = False
    datetime_1 = module_0.Datetime()
    timedelta_0 = datetime_1.duration(int_0, bool_0)
    assert (
        f"{type(timedelta_0).__module__}.{type(timedelta_0).__qualname__}"
        == "datetime.timedelta"
    )
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.formatted_time()
    timestamp_format_0 = module_1.TimestampFormat.ISO_8601
    str_2 = datetime_1.formatted_date(str_0)
    var_0 = datetime_0.timestamp(timestamp_format_0)
    with pytest.raises(ValueError):
        datetime_1.bulk_create_datetimes(str_0, str_1)


def test_case_11():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    bool_0 = True
    bool_1 = True
    str_1 = datetime_0.month()
    str_2 = datetime_0.periodicity()
    str_3 = datetime_0.formatted_date()
    time_0 = datetime_0.time()
    var_0 = datetime_0.timestamp()
    timedelta_0 = datetime_0.duration(bool_0)
    assert (
        f"{type(timedelta_0).__module__}.{type(timedelta_0).__qualname__}"
        == "datetime.timedelta"
    )
    str_4 = datetime_0.month(bool_1)
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(none_type_0, none_type_0)


def test_case_12():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    bool_0 = True
    bool_1 = True
    str_0 = datetime_0.week_date(bool_0, bool_1)
    str_1 = datetime_0.month()
    assert str_1 == "March"
    var_0 = datetime_0.timestamp()
    str_2 = datetime_0.periodicity()
    with pytest.raises(ValueError):
        datetime_0.duration(var_0)


def test_case_13():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    int_0 = datetime_0.day_of_month()
    with pytest.raises(ImportError):
        datetime_0.datetime(timezone=datetime_0)


def test_case_14():
    datetime_0 = module_0.Datetime()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert (
        f"{type(datetime_0.seed).__module__}.{type(datetime_0.seed).__qualname__}"
        == "mimesis.types._MissingSeed"
    )
    assert datetime_0.locale == "en"
    str_0 = datetime_0.formatted_datetime()


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.month()
    str_2 = "ai7"
    var_0 = datetime_0.timestamp()
    str_3 = datetime_0.periodicity()
    str_4 = datetime_0.formatted_time(str_1)
    module_2.monthrange(str_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = "|.~YfBW\x0bO]J6KN"
    str_2 = datetime_0.formatted_datetime(str_1)
    assert str_2 == "|.~YfBW\x0bO]J6KN"
    str_3 = datetime_0.formatted_time()
    timestamp_format_0 = module_1.TimestampFormat.RFC_3339
    var_0 = datetime_0.timestamp(timestamp_format_0)
    bool_0 = False
    datetime_0.bulk_create_datetimes(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.gmt_offset()
    timestamp_format_0 = module_1.TimestampFormat.RFC_3339
    datetime_1 = datetime_0.datetime()
    assert (
        f"{type(datetime_1).__module__}.{type(datetime_1).__qualname__}"
        == "datetime.datetime"
    )
    var_0 = datetime_0.timestamp(timestamp_format_0)
    bool_0 = False
    datetime_0.bulk_create_datetimes(bool_0, str_0)


def test_case_18():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = datetime_0.gmt_offset()
    str_2 = datetime_0.formatted_time()
    timestamp_format_0 = module_1.TimestampFormat.ISO_8601
    var_0 = datetime_0.timestamp(timestamp_format_0)
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(str_2, str_2)


def test_case_19():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    bool_0 = True
    timedelta_0 = datetime_0.duration(bool_0)
    assert (
        f"{type(timedelta_0).__module__}.{type(timedelta_0).__qualname__}"
        == "datetime.timedelta"
    )
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(none_type_0, none_type_0)


def test_case_20():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    str_1 = "|.~YfBW\x0bO]J6KN"
    str_2 = datetime_0.gmt_offset()
    str_3 = datetime_0.formatted_time()
    timestamp_format_0 = module_1.TimestampFormat.RFC_3339
    var_0 = datetime_0.timestamp(timestamp_format_0)
    with pytest.raises(ValueError):
        datetime_0.bulk_create_datetimes(str_1, str_3)


def test_case_21():
    none_type_0 = None
    datetime_0 = module_0.Datetime(seed=none_type_0)
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "date.Datetime"
    )
    assert (
        f"{type(datetime_0.random).__module__}.{type(datetime_0.random).__qualname__}"
        == "mimesis.random.Random"
    )
    assert datetime_0.seed is None
    assert datetime_0.locale == "en"
    str_0 = datetime_0.timezone()
    bool_0 = True
    str_1 = datetime_0.periodicity()
    str_2 = datetime_0.month()
    var_0 = datetime_0.timestamp()
    str_3 = datetime_0.day_of_week(str_0)
    assert str_3 == "Mon."
    int_0 = datetime_0.day_of_month()
    assert int_0 == 28
    with pytest.raises(ImportError):
        datetime_0.datetime(bool_0, timezone=bool_0)
