# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = ".:."
    timers_0.min(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    none_type_0 = None
    with pytest.raises(KeyError):
        timers_0.stdev(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "z2*}+o[W"
    none_type_0 = None
    timers_0.add(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    bool_0 = False
    str_0 = "yW42:7'Ly7W\x0c"
    none_type_0 = timers_0.clear()
    int_0 = -2473
    none_type_1 = timers_0.add(str_0, int_0)
    float_0 = timers_0.median(str_0)
    assert float_0 == -2473
    float_1 = timers_0.max(str_0)
    assert float_1 == -2473
    float_2 = timers_0.mean(str_0)
    assert float_2 == -2473
    float_3 = timers_0.stdev(str_0)
    float_4 = timers_0.min(str_0)
    assert float_4 == -2473
    var_0 = timers_0.__ror__(bool_0)
    timers_0.__setitem__(float_3, timers_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "pE\rLRR\nhR"
    timers_0.count(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "s\x0b\t\tmf\x0cU@+"
    timers_0.total(str_0)


def test_case_7():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    bool_0 = False
    var_0 = timers_0.items()
    assert len(var_0) == 0
    str_0 = "yW42:7'Ly7W\x0c"
    none_type_0 = timers_0.clear()
    int_0 = -2473
    none_type_1 = timers_0.add(str_0, int_0)
    float_0 = timers_0.median(str_0)
    assert float_0 == -2473
    float_1 = timers_0.max(str_0)
    assert float_1 == -2473
    float_2 = timers_0.mean(str_0)
    assert float_2 == -2473
    float_3 = timers_0.stdev(str_0)
    float_4 = timers_0.min(str_0)
    assert float_4 == -2473
    var_1 = timers_0.__ror__(bool_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "%)H&?"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(str_0)
    assert float_0 == 0
    float_1 = timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "yW42:7'Ly7W\x0c"
    int_0 = -2471
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    str_1 = "+RA7m'On\";e0z]zDhL"
    float_0 = timers_0.stdev(str_0)
    float_1 = timers_0.min(str_0)
    assert float_1 == -2471
    none_type_1 = timers_0.clear()
    timers_0.min(str_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "y~or\rBdlZK%Dh^f"
    float_0 = timers_0.__iter__()
    timers_0.median(str_0)


def test_case_11():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "%yH&?"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    timers_1 = module_0.Timers()
    float_0 = timers_0.min(str_0)
    assert float_0 is False


@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "%)H&?"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    timers_0.min(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "|\tf{a$\nyMnXo-/Nh.="
    bool_0 = False
    int_0 = 678
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    none_type_1 = timers_0.add(str_0, bool_0)
    float_0 = timers_0.total(str_0)
    assert float_0 == 678
    str_1 = "+RA7m'On\";e0z]zDhL"
    float_1 = timers_0.stdev(str_0)
    assert float_1 == pytest.approx(479.4183976444792, abs=0.01, rel=0.01)
    timers_0.min(str_1)


def test_case_14():
    timers_0 = module_0.Timers()
    assert len(timers_0) == 0
    str_0 = "yW42]7'Ly7W\x0c"
    int_0 = -2473
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 == -2473
    var_0 = timers_0.pop(str_0)
    assert var_0 == -2473
    float_1 = timers_0.stdev(str_0)
    def test_timer_init():
        timer = module_0.Timers()
        assert len(timer) == 0
        assert len(timer._timings) == 0

    def test_add_single_value():
        timer = module_0.Timers()
        timer.add("test", 1.0)
        assert timer["test"] == 1.0
        assert timer._timings["test"] == [1.0]

    def test_add_multiple_values():
        timer = module_0.Timers()
        timer.add("test", 1.0)
        timer.add("test", 2.0)
        assert timer["test"] == 3.0
        assert timer._timings["test"] == [1.0, 2.0]

    def test_clear():
        timer = module_0.Timers()
        timer.add("test", 1.0)
        timer.clear()
        assert len(timer) == 0
        assert len(timer._timings) == 0

    def test_multiple_timers():
        timer = module_0.Timers()
        timer.add("timer1", 1.0)
        timer.add("timer2", 2.0)
        assert len(timer) == 2
        assert timer["timer1"] == 1.0
        assert timer["timer2"] == 2.0

    def test_statistical_functions():
        timer = module_0.Timers()
        values = [1.0, 2.0, 3.0, 4.0]
        for v in values:
            timer.add("test", v)
        
        assert timer.count("test") == 4
        assert timer.total("test") == 10.0
        assert timer.min("test") == 1.0
        assert timer.max("test") == 4.0
        assert timer.mean("test") == 2.5
        assert timer.median("test") == 2.5
        assert pytest.approx(timer.stdev("test"), 0.01) == 1.29099

    def test_stdev_insufficient_data():
        timer = module_0.Timers()
        timer.add("test", 1.0)
        assert math.isnan(timer.stdev("test"))

    @pytest.mark.xfail(strict=True)
    def test_nonexistent_timer():
        timer = module_0.Timers()
        with pytest.raises(KeyError):
            timer.mean("nonexistent")

    @pytest.mark.xfail(strict=True)
    def test_direct_assignment():
        timer = module_0.Timers()
        with pytest.raises(TypeError):
            timer["test"] = 1.0

    def test_apply_custom_function():
        timer = module_0.Timers()
        timer.add("test", 1.0)
        timer.add("test", 2.0)
        result = timer.apply(lambda x: sum(x) / len(x), "test")
        assert result == 1.5

    @pytest.mark.xfail(strict=True)
    def test_apply_invalid_name():
        timer = module_0.Timers()
        with pytest.raises(KeyError):
            timer.apply(sum, "nonexistent")