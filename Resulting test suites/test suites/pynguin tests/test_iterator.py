# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import iterator as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.scanl(dict_0, dict_0, *dict_0)
    module_0.scanl(var_0, dict_0, *var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    str_0 = "4="
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: str_0}
    module_0.scanr(dict_0, str_0)


def test_case_2():
    bytes_0 = b""
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    range_0 = lazy_list_0.__contains__(lazy_list_0)
    assert range_0 is False
    assert len(lazy_list_0) == 0
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.Range()


def test_case_4():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_0 = range_0.__len__()
    assert var_0 == 2


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    range_0 = module_0.Range(*var_0)
    assert len(lazy_list_0) == 3
    assert var_0.index == 3
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    range_0.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"b\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    map_list_0 = module_0.MapList(bytes_0, var_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func == b"b\xb86"
    assert (
        f"{type(map_list_0.list).__module__}.{type(map_list_0.list).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    map_list_0.index(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    int_0 = -3578
    module_0.scanr(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = range_0.count(lazy_list_0)
    bool_0 = True
    map_list_0 = module_0.MapList(bool_0, bool_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func is True
    assert map_list_0.list is True
    map_list_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    range_0 = module_0.Range(*lazy_list_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_1 = range_0.__getitem__(var_0)
    assert var_1 == 24
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    none_type_0 = None
    map_list_0 = module_0.MapList(none_type_0, none_type_0)
    assert (
        f"{type(map_list_0).__module__}.{type(map_list_0).__qualname__}"
        == "iterator.MapList"
    )
    assert map_list_0.func is None
    assert map_list_0.list is None
    map_list_0.__contains__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\xb8"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 1
    var_1 = lazy_list_0.__iter__()
    range_0 = module_0.Range(*var_1)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 184
    var_2 = range_0.__getitem__(var_0)
    assert var_2 == 0
    var_3 = lazy_list_0.__len__()
    assert var_3 == 1
    range_1 = module_0.Range(*lazy_list_0)
    assert len(range_1) == 184
    lazy_list_0.index(var_2, var_2)


def test_case_12():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.count(lazy_list_0)
    assert var_0 == 0
    assert len(lazy_list_0) == 3
    var_1 = lazy_list_0.__len__()
    assert var_1 == 3


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xc9\x91\xd3\xf73"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.scanr(bytes_0, bytes_0, *list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\xeb)uxl\xd0~\xb3\xf3g"
    list_0 = [bytes_0, bytes_0]
    float_0 = -692.53
    tuple_0 = (float_0,)
    var_0 = module_0.scanr(tuple_0, tuple_0)
    var_1 = var_0.__iter__()
    var_1.__contains__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\x93\xb8B"
    iterator_0 = module_0.split_by(bytes_0, separator=bytes_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = module_0.scanl(lazy_list_0, bytes_0, *lazy_list_0)
    assert len(lazy_list_0) == 1
    var_0.index(var_0, iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    iterator_0 = module_0.split_by(none_type_0, criterion=none_type_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.count(iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b")"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, separator=bytes_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    lazy_list_2 = module_0.LazyList(lazy_list_1)
    assert (
        f"{type(lazy_list_2.iter).__module__}.{type(lazy_list_2.iter).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    var_0 = lazy_list_2.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    var_1 = lazy_list_2.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 1
    assert len(lazy_list_1) == 1
    assert len(lazy_list_2) == 1
    var_2 = module_0.scanl(lazy_list_1, lazy_list_0)
    var_3 = lazy_list_1.__iter__()
    bytes_1 = b"\xbb=\x06\x08\x16F\x10(\x8c\xe9\xa4\xedXi"
    module_0.Range(*bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    var_1 = lazy_list_0.__iter__()
    range_0 = module_0.Range(*var_1)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_2 = range_0.__getitem__(var_0)
    assert var_2 == 24
    lazy_list_0.index(var_1)


def test_case_19():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.count(lazy_list_0)
    assert var_0 == 0
    assert len(lazy_list_0) == 3
    range_0 = lazy_list_0.count(bytes_0)
    var_1 = lazy_list_0.__len__()
    assert var_1 == 3


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__contains__(bytes_0)
    assert var_0 is False
    assert len(lazy_list_0) == 3
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    var_1 = range_0.__getitem__(var_0)
    assert var_1 == 24
    var_2 = module_0.MapList(var_1, bytes_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "iterator.MapList"
    assert len(var_2) == 3
    module_0.Range(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    int_0 = var_0.__next__()
    assert int_0 == 24
    assert lazy_list_0.list == [24]
    assert var_0.index == 1
    var_1 = lazy_list_0.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 3
    var_0.__getitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"\x18\xb8"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 160
    range_0.__getitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\x18\xb86"
    range_0 = module_0.Range(*bytes_0)
    assert (
        f"{type(range_0).__module__}.{type(range_0).__qualname__}" == "iterator.Range"
    )
    assert len(range_0) == 2
    iterator_0 = module_0.split_by(range_0)
    none_type_0 = None
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=lazy_list_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    lazy_list_1.count(iterator_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=bytes_0)
    lazy_list_1 = module_0.LazyList(lazy_list_0)
    assert (
        f"{type(lazy_list_1.iter).__module__}.{type(lazy_list_1.iter).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    var_0 = module_0.drop_until(bytes_0, lazy_list_0)
    module_0.Range(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.MapList(bool_0, dict_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "iterator.MapList"
    assert len(var_0) == 1
    var_0.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\x18\xb86"
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    iterator_0 = module_0.split_by(lazy_list_0, criterion=lazy_list_0)
    lazy_list_1 = module_0.LazyList(iterator_0)
    float_0 = -2234.0
    lazy_list_1.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\x18\xb86"
    float_0 = 2041.46422
    lazy_list_0 = module_0.LazyList(bytes_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.bytes_iterator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    lazy_list_0.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bytes_0 = b""
    iterator_0 = module_0.split_by(bytes_0, separator=bytes_0)
    lazy_list_0 = module_0.LazyList(iterator_0)
    assert (
        f"{type(lazy_list_0).__module__}.{type(lazy_list_0).__qualname__}"
        == "iterator.LazyList"
    )
    assert (
        f"{type(lazy_list_0.iter).__module__}.{type(lazy_list_0.iter).__qualname__}"
        == "builtins.generator"
    )
    assert lazy_list_0.exhausted is False
    assert lazy_list_0.list == []
    var_0 = lazy_list_0.__iter__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "iterator.LazyList.LazyListIterator"
    )
    assert var_0.index == 0
    var_1 = lazy_list_0.count(var_0)
    assert var_1 == 0
    assert len(lazy_list_0) == 0
    var_2 = lazy_list_0.__iter__()
    var_2.index(lazy_list_0)
