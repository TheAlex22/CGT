# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import platform as module_0
import checker as module_1


def test_case_0():
    var_0 = module_0.python_implementation()
    file_checker_0 = module_1.FileChecker(filename=var_0, plugins=var_0, options=var_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "CPython"
    assert file_checker_0.filename == "CPython"
    assert file_checker_0.plugins == "CPython"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'CPython'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "CPython"
    assert file_checker_0.should_process is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "Caught keyboard interrupt from user"
    var_0 = module_0.freedesktop_os_release()
    module_1.find_offset(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.version()
    var_0.report()


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.system()
    module_1.Manager(var_0, var_0, var_0)


def test_case_4():
    bool_0 = True
    int_0 = 270
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (int_0, tuple_0)
    list_0 = [tuple_1, tuple_1]
    tuple_2 = module_1.find_offset(bool_0, list_0)


def test_case_5():
    str_0 = "V|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "V|"
    assert file_checker_0.filename == "V|"
    assert file_checker_0.plugins == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "V|"
    assert file_checker_0.should_process is False
    tuple_0 = file_checker_0.run_checks()
    with pytest.raises(AssertionError):
        file_checker_0.run_physical_checks(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    var_0 = module_0.processor()
    tuple_0 = module_1.find_offset(var_0, var_0)
    var_1 = var_0.__ne__(var_0)
    var_0.visit_match_case(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.freedesktop_os_release()
    var_1 = module_0.release()
    module_1.find_offset(var_1, var_1)


def test_case_8():
    str_0 = "V|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "V|"
    assert file_checker_0.filename == "V|"
    assert file_checker_0.plugins == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "V|"
    assert file_checker_0.should_process is False
    bool_0 = False
    with pytest.raises(AssertionError):
        file_checker_0.handle_newline(bool_0)


def test_case_9():
    str_0 = "vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "vV|"
    assert file_checker_0.filename == "vV|"
    assert file_checker_0.plugins == "vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "vV|"
    assert file_checker_0.should_process is False
    with pytest.raises(AssertionError):
        file_checker_0.run_logical_checks()


def test_case_10():
    str_0 = "V|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "V|"
    assert file_checker_0.filename == "V|"
    assert file_checker_0.plugins == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "V|"
    assert file_checker_0.should_process is False
    str_1 = file_checker_0.report(str_0, str_0, str_0, str_0)
    assert str_1 == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        ),
        ("V|", "V|", "V|", "V|", None),
    ]
    tuple_0 = file_checker_0.run_checks()


def test_case_11():
    str_0 = "vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "vV|"
    assert file_checker_0.filename == "vV|"
    assert file_checker_0.plugins == "vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "vV|"
    assert file_checker_0.should_process is False
    with pytest.raises(AssertionError):
        file_checker_0.run_ast_checks()


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    none_type_1 = None
    none_type_2 = None
    module_1.FileChecker(filename=none_type_0, plugins=none_type_1, options=none_type_2)


def test_case_13():
    str_0 = "vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "vV|"
    assert file_checker_0.filename == "vV|"
    assert file_checker_0.plugins == "vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "vV|"
    assert file_checker_0.should_process is False
    str_1 = file_checker_0.__repr__()
    assert str_1 == "FileChecker for vV|"
    tuple_0 = file_checker_0.run_checks()
    with pytest.raises(AssertionError):
        file_checker_0.run_logical_checks()


def test_case_14():
    str_0 = "vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "vV|"
    assert file_checker_0.filename == "vV|"
    assert file_checker_0.plugins == "vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "vV|"
    assert file_checker_0.should_process is False
    tuple_0 = file_checker_0.run_checks()
    var_0 = module_0.win32_edition()
    with pytest.raises(AssertionError):
        file_checker_0.process_tokens()


def test_case_15():
    str_0 = "V|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "V|"
    assert file_checker_0.filename == "V|"
    assert file_checker_0.plugins == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "V|"
    assert file_checker_0.should_process is False
    var_0 = module_0.win32_edition()
    with pytest.raises(AssertionError):
        file_checker_0.check_physical_eol(var_0, str_0)


def test_case_16():
    str_0 = "V|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "V|"
    assert file_checker_0.filename == "V|"
    assert file_checker_0.plugins == "V|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'V|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "V|"
    assert file_checker_0.should_process is False
    tuple_0 = file_checker_0.run_checks()


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "-vV\r%Oh|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "-vV\r%Oh|"
    assert file_checker_0.filename == "-vV\r%Oh|"
    assert file_checker_0.plugins == "-vV\r%Oh|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: '-vV\\r%Oh|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "-vV\r%Oh|"
    assert file_checker_0.should_process is False
    int_0 = 1262
    int_1 = -3473
    int_2 = -814
    tuple_0 = (int_1, int_2)
    tuple_1 = (int_0, tuple_0)
    list_0 = [tuple_1]
    tuple_2 = module_1.find_offset(int_1, list_0)
    none_type_0 = None
    str_1 = "O%E5=bJ%I"
    file_checker_0.report(none_type_0, int_0, int_0, str_1)


def test_case_18():
    str_0 = "vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "vV|"
    assert file_checker_0.filename == "vV|"
    assert file_checker_0.plugins == "vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: 'vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "vV|"
    assert file_checker_0.should_process is False
    tuple_0 = file_checker_0.run_checks()
    var_0 = module_0.freedesktop_os_release()
    var_1 = module_0.python_version_tuple()
    var_2 = module_0.win32_edition()
    with pytest.raises(AssertionError):
        file_checker_0.run_check(var_0)


def test_case_19():
    str_0 = "-vV|"
    file_checker_0 = module_1.FileChecker(filename=str_0, plugins=str_0, options=str_0)
    assert (
        f"{type(file_checker_0).__module__}.{type(file_checker_0).__qualname__}"
        == "checker.FileChecker"
    )
    assert file_checker_0.options == "-vV|"
    assert file_checker_0.filename == "-vV|"
    assert file_checker_0.plugins == "-vV|"
    assert file_checker_0.results == [
        (
            "E902",
            0,
            0,
            "FileNotFoundError: [Errno 2] No such file or directory: '-vV|'",
            None,
        )
    ]
    assert file_checker_0.statistics == {
        "tokens": 0,
        "logical lines": 0,
        "physical lines": 0,
    }
    assert file_checker_0.processor is None
    assert file_checker_0.display_name == "-vV|"
    assert file_checker_0.should_process is False
    tuple_0 = file_checker_0.run_checks()
    int_0 = 3028
    int_1 = 2
    tuple_1 = (int_1, int_0)
    tuple_2 = (int_0, tuple_1)
    list_0 = [tuple_2, tuple_2]
    tuple_3 = module_1.find_offset(tuple_0, list_0)
    with pytest.raises(AssertionError):
        file_checker_0.run_logical_checks()
