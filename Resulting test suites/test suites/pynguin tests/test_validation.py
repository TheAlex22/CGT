# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validation as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__eq__(bool_0)
    assert var_0 is False
    var_1 = validation_0.to_box()
    var_0.is_fail()


def test_case_1():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__str__()
    assert var_0 == "Validation.success[False]"


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\x0b^\x0bG"
    validation_0 = module_0.Validation(str_0, str_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    validation_1 = module_0.Validation(none_type_0, str_0)
    var_0 = validation_1.__str__()
    assert var_0 == "Validation.fail[None, \x0b^\x0bG]"
    var_0.to_either()


def test_case_3():
    bytes_0 = b"1\x1b\x8e^\xc8dP"
    bytes_1 = b"\x95"
    set_0 = {bytes_1, bytes_1, bytes_1}
    validation_0 = module_0.Validation(set_0, bytes_1)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.to_either()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pymonet.either.Left"
    )
    assert var_0.value == b"\x95"
    var_1 = var_0.to_lazy()
    var_2 = var_1.map(bytes_0)
    var_3 = var_1.__str__()


def test_case_4():
    tuple_0 = ()
    validation_0 = module_0.Validation(tuple_0, tuple_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.is_fail()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    int_0 = 1638
    validation_0 = module_0.Validation(int_0, int_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.map(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.bind(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    validation_0 = module_0.Validation(none_type_0, none_type_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.ap(none_type_0)


def test_case_9():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.to_box()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"u\xed(\xe8\xd8\x16\xec2Z\x1f\xb0\xff\x9b\xa8\xde\x02\xd0\xf2\xe5"
    validation_0 = module_0.Validation(bytes_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_1 = module_0.Validation(validation_0, bytes_0)
    var_0 = validation_1.to_lazy()
    var_1 = var_0.to_maybe()
    var_2 = var_1.to_either()
    var_2.is_fail()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    none_type_0 = None
    validation_0 = module_0.Validation(bool_0, none_type_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_0.to_try()


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    validation_0 = module_0.Validation(none_type_0, dict_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.to_maybe()
    assert var_0.is_nothing is True
    var_0.to_maybe()


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_1)
    assert var_0 is True
    var_1 = var_0.__str__()
    assert var_1 == "True"
    var_2 = validation_0.to_box()
    var_0.bind(bool_0)


def test_case_14():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__eq__(bool_0)
    assert var_0 is False
    var_1 = validation_0.to_box()
    var_2 = validation_0.to_maybe()
    assert var_2.is_nothing is False
    assert var_2.value is False
    var_3 = validation_0.__str__()
    assert var_3 == "Validation.success[False]"
    var_4 = var_3.__str__()
    assert var_4 == "Validation.success[False]"


def test_case_15():
    bool_0 = False
    bytes_0 = b""
    validation_0 = module_0.Validation(bool_0, bytes_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    var_0 = validation_0.__eq__(bool_0)
    assert var_0 is False
    var_1 = validation_0.to_box()
    var_2 = var_1.to_maybe()
    var_3 = validation_0.to_either()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "pymonet.either.Right"
    )
    assert var_3.value is False
    var_4 = validation_0.__str__()
    assert var_4 == "Validation.success[False]"
    var_5 = var_4.__str__()
    assert var_5 == "Validation.success[False]"


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    validation_0 = module_0.Validation(bool_0, bool_0)
    assert (
        f"{type(module_0.Validation.success).__module__}.{type(module_0.Validation.success).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Validation.fail).__module__}.{type(module_0.Validation.fail).__qualname__}"
        == "builtins.method"
    )
    validation_1 = module_0.Validation(bool_0, bool_0)
    var_0 = validation_1.__eq__(validation_1)
    assert var_0 is True
    validation_2 = module_0.Validation(var_0, validation_0)
    assert validation_2.value is True
    var_1 = validation_2.__eq__(validation_1)
    assert var_1 is False
    var_0.bind(bool_0)
